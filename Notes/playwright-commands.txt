Adding playwright in the project -> npm init playwright
---------------------------------------------------------------
Running playwright tests:
1) npx playwright test --headed
2) npx playwright test --headless
3) npx playwright test
4) npx playwright test --debug
5) npx playwright codegen http://google.com  -> Record and Playback Automation {Command Syntax : npx playwright codegen [Web URL Link]}
6) npx playwright test --ui
----------------------------------------------------------------
Debug: Debug npm Script : To call Debug npm Script inside the VS Code press = Ctrl + Shift + P
----------------------------------------------------------------
Creating New Project called Excel Utility & Installing the exceljs dependency in it
1) mkdir ExcelJsUtil -> Creating new Project Folder
2) cd ExcelJsUtil -> Going inside the new directory
3) npm init -> Installing Node Module
4) npm install exceljs --savedev -> Installing exceljs dependency & Saving the dependency into the 'package.json' file
------------------------------------------------------------------
NodeJS execution commands
1) npm install
2) node src/JavaScriptTest/code/excelDemo.js
3) node src/JavaScriptTest/code/extractingExcelData.js
------------------------------------------------------------------
Running PlayWright Tests with Custom Configuration Files
1) npx playwright test <name of the test file>.spec.js --config <name of the custom configuration file>.config.js
Example:  npx playwright test UIClientApp.spec.js --config testPlayWright.config.js
2) npx playwright test <name of the test file>.spec.js --config <name of the custom configuration file>.config.js --project=safari -> Command to invoke the safari browser from config file.
Example:  npx playwright test UIClientApp.spec.js --config testPlayWright.config.js --project=safari
----------------------------------------------------------------------
Running UI Automation Tests in Series and Parallel
By default the different tests present in the one single spec.js file will run in Series
By default if we run the entire folder in our case src/web/tests then all the different test scenario files will run in Parallel manner
By default Paywright supports running tests in Parallel
1) Running tests in Parallel manner -> Example: npx playwright test src/web/tests
2) Running tests in Series manner -> Example: npx playwright test UIClientApp.spec.js
3) Running 5 tests file in paralllel -> Example: npx playwright test src/web/tests --config testPlayWright.config.js
-----------------------------------------------------------------------
Running UI Automation test in Parallel manner for single spec.js file
Here we are making the code changes so that different tests present in the same spec.js file will be getting executed in parallel manner
----------------------------------------------------------------------
Playwright command to run a specific test with unique test tag 
1) npx playwright test --grep @Web -> this command will search for the '@Web' tag in all .spec.js files and run the files which have '@Web' present in the test description
----------------------------------------------------------------------
To do the clean build for playwright project we use below commnads in sequence
1) npm cache clean --force
2) rm -rf node_modules
3) rm -rf package-lock.json
4) npm install
5) npx playwright install
---------------------------------------------------------------------
Reporting in the PlayWright
1) For HTML reports, if you want to see the traces then go to "https://trace.playwright.dev" and upload the trace.zip file which you got from html reports
2) For Allure reports go to "https://www.npmjs.com/package/allure-playwright" this web page for allure-playwright documentation
3) Run the command: npm install -D allure-playwright
4) Run test with the below command to see the allure Reporting
Command: npx playwright test <Test File Name>.spec.js --reporter=line,allure-playwright
Command to aggregate allure reports: allure generate ./allure-results --clean
To open allure reports use command: allure open ./allure-report
-----------------------------------------------------------------------
Commands to run the tests from package.json file
1) npm run <Name of the script mentioned in the scripts section of the package.json file>
Example: npm rum webTests
-----------------------------------------------------------------------
Install Jenkins
1) Go to the website "https://www.jenkins.io/download/"
2) Download jenkins.war file
3) run the command "java -jar jenkins.war --httpPort=9081"
4) Access Jenkins at: http://localhost:9081
5) If you want Jenkins to use a fixed home path (instead of defaulting to .jenkins in your user folder):
Command: java -DJENKINS_HOME="D:\JenkinsHome" -jar jenkins.war --httpPort=9081
-----------------------------------------------------------------------
To run the project on Jenkins We will be using below commands for Execute shell
1) npm install
2) npx playwright install
3) npm run smoke
------------------------------------------------------------------------
To run the project on Jenkins with parameterized scripts below commands are used for Execute shell
npm install
npx playwright install
npm run "$Script"
------------------------------------------------------------------------
To run the project on Jenkins with parameterized scripts below commands are used for Execute Windows batch command
npm install
npx playwright install
npm run "%Script"
--------------------------------------------------------------------------
Installing TypeScript to the project
1) Go to the website "https://www.npmjs.com/package/typescript"
2) npm install --save-dev typescript
3) Create demo.ts typescript file.
4) To run the ".ts" typescript file first we need to convert it into JavaScript file.
5) To run any JavaScript file with ".js" extension we use command as : node example.js
6) To convert any typescript file with ".ts" into JavaScript file we use command as: npx tsc src/TypeScriptTest/code/demo.ts
7) Now it will create one demo.js file which we can run with node command : node src/TypeScriptTest/code/demo.js